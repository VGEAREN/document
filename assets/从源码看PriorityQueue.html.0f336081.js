import{_ as n,a as s}from"./app.3ee335a3.js";const a={},p=s(`<h3 id="add-offer" tabindex="-1"><a class="header-anchor" href="#add-offer" aria-hidden="true">#</a> add/offer</h3><blockquote><p>java.util.PriorityQueue#add</p><p>\u5C06\u6307\u5B9A\u5143\u7D20\u63D2\u5165\u6B64\u4F18\u5148\u7EA7\u961F\u5217\u3002 \u8FD4\u56DE\uFF1Atrue \uFF08\u7531Collection.add\u6307\u5B9A\uFF09 \u629B\u51FA\uFF1AClassCastException \u2013 \u5982\u679C\u6839\u636E\u4F18\u5148\u7EA7\u961F\u5217\u7684\u987A\u5E8F\u65E0\u6CD5\u5C06\u6307\u5B9A\u5143\u7D20\u4E0E\u5F53\u524D\u5728\u6B64\u4F18\u5148\u7EA7\u961F\u5217\u4E2D\u7684\u5143\u7D20\u8FDB\u884C\u6BD4\u8F83 NullPointerException \u2013 \u5982\u679C\u6307\u5B9A\u7684\u5143\u7D20\u4E3A\u7A7A</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// java.util.PriorityQueue#add</span>

<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">offer</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>\u8FDB\u5165offer -&gt; siftUp\uFF0C\u76F4\u63A5\u770BsiftUp\u51FD\u6570</p><h4 id="siftup" tabindex="-1"><a class="header-anchor" href="#siftup" aria-hidden="true">#</a> siftUp</h4><blockquote><p>java.util.PriorityQueue#siftUp</p><p>\u5728\u4F4D\u7F6E k \u5904\u63D2\u5165\u9879 x\uFF0C\u901A\u8FC7\u5C06 x \u5411\u4E0A\u63D0\u5347\u6811\u76F4\u5230\u5B83\u5927\u4E8E\u6216\u7B49\u4E8E\u5176\u7236\u9879\u6216\u8005\u662F\u6839\u6765\u4FDD\u6301\u5806\u4E0D\u53D8\u3002 \u7B80\u5316\u548C\u52A0\u901F\u5F3A\u5236\u548C\u6BD4\u8F83\u3002 Comparable \u548C Comparator \u7248\u672C\u88AB\u5206\u6210\u4E0D\u540C\u7684\u65B9\u6CD5\uFF0C\u8FD9\u4E9B\u65B9\u6CD5\u5728\u5176\u4ED6\u65B9\u9762\u662F\u76F8\u540C\u7684\u3002 \uFF08\u7C7B\u4F3C\u4E8E siftDown\u3002\uFF09 \u53C2\u6570\uFF1Ak - \u8981\u586B\u8865\u7684\u4F4D\u7F6E x - \u8981\u63D2\u5165\u7684\u9879\u76EE</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// java.util.PriorityQueue#siftUp</span>

<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">siftUp</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token class-name">E</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>comparator <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token function">siftUpUsingComparator</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token function">siftUpComparable</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>\u8FD9\u91CC\u6839\u636E\u6709\u65E0\u6BD4\u8F83\u5668\u518D\u5206\u4E3A\u4E24\u4E2A\u60C5\u51B5\uFF0C\u65E0\u6BD4\u8F83\u5668\u65F6\u4F7F\u7528\u81EA\u7136\u987A\u5E8F\u6392\u5E8F\uFF08Comparable natural ordering\uFF09\uFF1A</p><h4 id="siftupcomparable" tabindex="-1"><a class="header-anchor" href="#siftupcomparable" aria-hidden="true">#</a> siftUpComparable</h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">siftUpComparable</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token class-name">E</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// E\u6216\u8005\u5B83\u7684\u7236\u7C7B\u5FC5\u987B\u5B9E\u73B0\u4E86Comparable\u63A5\u53E3\uFF0C\u4E0D\u7136\u4F1A\u62A5ClassCastException</span>
    <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> key <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> x<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> parent <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> e <span class="token operator">=</span> queue<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> e<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        queue<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>
        k <span class="token operator">=</span> parent<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    queue<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>\u770B\u8FD9\u6BB5\u4EE3\u7801\uFF0C\u53EF\u4EE5\u5224\u65AD\u8FD9\u91CC\u662F\u4E00\u4E2A<strong>\u5C0F\u9876\u5806</strong>\uFF0C\u6BCF\u6B21\u5143\u7D20\u8FDB\u6765\uFF0C\u5C31\u548C\u7236\u8282\u70B9\u6BD4\u8F83\uFF08[parent = (k - 1) &gt;&gt;&gt; 1]\u8FD9\u91CC\u53EF\u4EE5\u627E\u5230\u7236\u8282\u70B9\uFF0C(\u5F53\u524D\u8282\u70B9-1)/2\uFF09\uFF0C\u5982\u679C\u7236\u8282\u70B9\u5927\u4E8E\u65B0\u52A0\u8282\u70B9\uFF0C\u5219\u4EA4\u6362\u503C\uFF0C\u7136\u540E\u518D\u548C\u7236\u8282\u70B9\u7684\u7236\u8282\u70B9\u6BD4\u8F83\uFF0C\u4EE5\u6B64\u7C7B\u63A8\u3002</p><h3 id="poll" tabindex="-1"><a class="header-anchor" href="#poll" aria-hidden="true">#</a> poll</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// java.util.PriorityQueue#poll</span>
<span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token operator">--</span>size<span class="token punctuation">;</span>
    modCount<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token class-name">E</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">E</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> queue<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">;</span>
    queue<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token function">siftDown</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>\u540C\u7406\uFF0C\u51FA\u5143\u7D20\u8DDF\u5165\u7684\u903B\u8F91\u6D41\u7A0B\u5DEE\u4E0D\u591A\uFF0C\u6211\u4EEC\u76F4\u63A5\u6765\u5230<code>siftDown</code> -&gt;<code>siftDownComparable</code>\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">siftDownComparable</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token class-name">E</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> key <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>x<span class="token punctuation">;</span>
    <span class="token keyword">int</span> half <span class="token operator">=</span> size <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// loop while a non-leaf</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> half<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> child <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// assume left child is least</span>
        <span class="token class-name">Object</span> c <span class="token operator">=</span> queue<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> right <span class="token operator">=</span> child <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> size <span class="token operator">&amp;&amp;</span>
            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> c<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> queue<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            c <span class="token operator">=</span> queue<span class="token punctuation">[</span>child <span class="token operator">=</span> right<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> c<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        queue<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>
        k <span class="token operator">=</span> child<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    queue<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>\u8FD9\u91CC\u628A\u6700\u540E\u4E00\u4E2A\u5143\u7D20\u62FF\u51FA\u6765\uFF0C\u91CD\u5EFA\u5C0F\u9876\u5806\u3002</p>`,16);function t(e,o){return p}var l=n(a,[["render",t]]);export{l as default};
